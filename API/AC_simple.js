/** * Boilerplate code (virtually the same for all APIs) * START *//** * Called externally (xhr): request handler comes in here * @param {HTTPRequest} request * @param {HTTPResponse} response * @return {JSON} */function acController (request, response) {	var 		call,		offset,		version,		method,		params,		fx;	// TODO: sometimes this debugger is needed for cross-project api calls	// debugger;		try {		// pull out version and method from URL		call = request.url.split('/');		// begins with /api as opposed to /<projectID>/api		offset = call[1] == 'api' ? 1 : 0;		version = call[3 - offset];		version = Number(version) == version ? version : AC.activeVersion;		method = call.slice(4 - offset).join('.');				// grab any parameters		params = (request && request.hasOwnProperty('body') && request.body.length) ? JSON.parse(request.body) : new Object();				// try to get the method requested		fx = eval('AC.version[' + (version - 1) + '].' + method);	}	catch (e) {			}		// check gatekeeper security by...		// localhost	if (request.host.indexOf('localhost') == 0 || 		// whitelisted host		AC.accessHost.indexOf(request.remoteAddress) != -1 ||		// debug token present		AC.accessToken.indexOf(params.token) != -1) {				// this method exists, run it		if (typeof fx == 'function') {			response.contentType = 'application/json';			return JSON.stringify(fx.apply(this,params.arguments));		}	}		// something not right, error out	response.contentType = 'application/json';	return JSON.stringify(accessDenied());};/** * The Access & control API */var AC = {	name : 'AC',	// all possible incarnations of this API	version : new Array(),	// default to version 1 if nothing specified	activeVersion : 1,	// external access allowed from following tokens	accessToken : new Array(),	// access allowed without token from following hosts	accessHost : new Array()}/** * Called from this project (require), export */var module = module || new Object();if (module && module.exports) {	module.exports = AC;}// what is the url for the xhr request (will be different for dev/deployed)var URL = require( (FileSystemSync("PROJECT").path.split('/').slice(0,FileSystemSync("PROJECT").path.split('/').length-2).join('/')) + '/AccessControl' + '/API/security_registry.js' ).path('AC');// get permitted actions (via xhr except for this one place)	// allowed actions the same for all versions; future can be different by versionvar xhr = require(FileSystemSync("EXTENSIONS_USER").path + "Modules/XHR");var actionsAllowed = xhr.post(URL, "security", "AC").result;/** * Check if logged in user can perform this call * @param {String} path The scoped method we're trying to run * @return {Boolean} Can this method be run or not */function accessCheck(path,fx) {	// no access, fail	if (actionsAllowed.indexOf(path) == -1) {		return accessDenied;	}	// run	else {		return fx;	}}/** * Generic error function */function accessDenied() {	return { 		'error': 401, 		'errorMessage': 'Unauthorized'	};}/** * Whitelisted developer tokens * 08F7FCCB-2B02-4ACE-BBC8-2C2A527EDC5F is Bratislava */AC.accessToken.push('08F7FCCB-2B02-4ACE-BBC8-2C2A527EDC5F');/** * Boilerplate code (virtually the same for all APIs) * END */   /** * Actual API calls (different for all APIs) * START */   /** * AC API * @version 1 * @modified 2014 April 14 */var version1 = new Object();AC.version.push(version1);	/**	 * API: public methods	 *	 * Note that the active version is assigned also to the top-level API,	 * so specifying version is optional for normal calls	 *	 * Pattern: define function, insert into api (via  permission check function)	 */	 	AC.organization = 	version1.organization = 		new Object();	/**	 * Get all organizations	 * @return {Collection}	 */	function get() {		return ds.Organization.all();	};	version1.organization.getAll = accessCheck('organization.getAll',get);	/**	 * Remove all organizations	 * @return {Collection}	 */	function remove() {		return ds.Organization.remove();	};	version1.organization.removeAll = accessCheck('organization.removeAll',remove);  /** * Actual API calls (different for all APIs) * END */