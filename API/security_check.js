/* * This file is meant to be required and called from the bottom  * of every API.  It removes access to calls for which the current * session doesn't have access * * @example <caption>Paste this code at the bottom of your main API javascript sheet, replacing out arguments appropriately</caption> * require( (FileSystemSync("PROJECT").path.split('/').slice(0,FileSystemSync("PROJECT").path.split('/').length-2).join('/')) + '/AccessControl' + '/API/security_check.js' )("API",API); *//** * Access and Control * @param {String} module IDentifier for requested module * @param {Object} actions All actions provided by requested API * @return {Object} API with access control */function init(module,actions) {	// what is the url for the xhr request	var URL = require( (FileSystemSync("PROJECT").path.split('/').slice(0,FileSystemSync("PROJECT").path.split('/').length-2).join('/')) + '/AccessControl' + '/API/security_registry.js' ).path("AC");		// get permitted actions (via xhr except for this one place)	var xhr = require(FileSystemSync("EXTENSIONS_USER").path + "Modules/XHR");	var actionsAllowed = xhr.post(URL, "security", module).result;		/**	 * Recursively touch all properties on API	 * @param {Object} parent Object to iterate over	 * @param {String} path Breadcrumb to where this function is	 */	function iterate(parent,path) {				// non-null, really an object		if (parent && typeof parent == 'object' && typeof parent.hasOwnProperty == 'function') {			// keep track of where we are in the stack			if (path) {				path += '.';			}			else {				path = '';			}						for (var i in parent) {				iterate(parent[i], path + i);			}		}		// at a leaf, check if function not in action list, replace with dummy function that returns error object		else if (actionsAllowed.indexOf(path) == -1) {			eval('actions.' + path + ' = accessDenied');		}	}			// iterate over all possible actions in module object	iterate(actions);		// return actions currently logged in user can perform	return actions;};module.exports = init;/** * Generic error function */function accessDenied() {	return { 		'error': 401, 		'errorMessage': 'Unauthorized'	};}