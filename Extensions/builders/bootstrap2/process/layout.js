// requirevar 	Mustache	= require("../../../../Modules/Mustache.js"),	Widget		= require("./widget.js");// helper functionfunction decodeEntities(str) {	return String(str).replace(/&quot;/g, '"');};/*  * map * Given a set of html, grab bootstrap row. Return some cool structure * * @param {File} file * */exports.map = function (file) {	try {		var 			html 	= file.toString(),			map		= [],			json 	= JSON.parse(XmlToJSON(html, "json-bag", "section"));			/**************		 * DATA		 *************/		 map["kabootit-catalog"] 		= null;		 map["kabootit-datasources"] 	= [];		 json.meta.forEach(function(item){			if ( item.name === "WAF.catalog" ) {		 		map["kabootit-catalog"] = item;			}			else if ( item.name === "WAF.config.datasources" ) {				// clean up ID and source				item["data-id"] = item["data-id"].split("}")[1];				item["data-source"] = item["data-source"].split("}")[1];				map["kabootit-datasources"].push(item);			}		 });	 		/**************		 * WIDGETS		 *************/		// get the bootstrap row widget. note: must be first widget on the page		var bootstrap_row = json.div[0];		// 1, get row menu items to determine row columns order		var menuItems 		= json.div[0].ul[0].li;		var menuItemOrder	= []		for (var i = 0; i < menuItems.length; i++) {			var matches=menuItems[i].id.match(/\d+$/);			if (matches) {				 menuItemOrder.push( matches[0] );			};		};		// 2. get row columns		var columnObjects = json.div[0].div; // array		// 3. use menuItemIDs to order final column object output		var columnObjectsOrdered = []		menuItemOrder.forEach(function(entry) {			var newArray = columnObjects.filter( function (element) {				// TODO: error check if over 9 (we need to compare on numbers instead of string? or just handle 2 chars for up 99 max chars)				return element.id.slice( (entry < 10) ? -1 : -2 ) == entry;			});			columnObjectsOrdered.push(newArray[0]);		});		// FINAL: Widget data		columnObjectsOrdered.forEach(function(entry) {					// error: empty column			if ( typeof entry == "undefined") {				return;			}			// error: no vertical layout			if (	!entry.hasOwnProperty("div") ) {				return;			}				var menuItems		= entry.div[0].ul[0].li;			var menuItemOrder	= []			for (var i = 0; i < menuItems.length; i++) {				var matches=menuItems[i].id.match(/\d+$/);				if (matches) {					menuItemOrder.push( matches[0] );					}			};			var columnObjects = entry.div[0].div; // array			var rowObjectsOrdered = []			menuItemOrder.forEach(function(entry) {				var widgetWrapper = columnObjects.filter( function (element) {					return element.id.slice( (entry < 10) ? -1 : -2 ) == entry;				});							// Grab Widget!				var widget = Widget.process(widgetWrapper[0]);				rowObjectsOrdered.push(widget);			});			// STAGE 2: rows for column 1!			map.push(rowObjectsOrdered);				});		// add row template		map["kabootit-row-template"] = bootstrap_row["data-kabootit-template"];		// add column template		map["kabootit-column-template"] = [];		columnObjects.forEach(function(entry){			map["kabootit-column-template"].push(entry["data-kabootit-template"]);			});		return map;		}	catch (e) {			}};