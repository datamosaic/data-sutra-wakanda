Workers:	- connect, console output, create dummy data: https://github.com/AMorgaut/NG-Wakanda-Pack/blob/master/NG-Wakanda-Pack/Workers/initApp-sharedWorker.jsSystem Workers:	http://forum.wakanda.org/showthread.php?6861-SystemWorker-can-t-start-the-exe&p=32162&viewfull=1#post32162	1. code to normalize the platform		//Modules/system-workers/index.jsKSK code:var DIRECTORY_PATH = File(module.filename).parent.path;var OS = application.os;var PLATFORM = OS.isMac ? 'MAC' : OS.isWindows ? 'WIN' : OS.isLinux ? 'LIN' : 'UNKNOWN';var START_WITH_SPACE = /^\s/;var CURL_PATH; switch(PLATFORM){	case 'MAC': 		CURL_PATH = DIRECTORY_PATH + 'MacOS/curl';				break;	case 'WIN': 		CURL_PATH = DIRECTORY_PATH + 'Windows/curl.exe';		break;			case 'LIN': 		CURL_PATH = DIRECTORY_PATH + 'Linux/curl';		break;} function execute(path, command, stdIn){	var result = {		'console':{			'stdIn':'',			'stdOut':'',				'stdErr':''},		'worker':{			'hasStarted':null,			'exitStatus':null,			'forced':null}	};	if(typeof command === 'string'){		if(!START_WITH_SPACE.test(command)){			path += ' ';		}		result.console.stdIn = path + command;		var worker = new SystemWorker(result.console.stdIn);		worker.setBinary(true);		worker.onmessage = function(e){			try{				result.console.stdOut += e.data.toString('utf8');			}catch(e){			//	console.log(JSON.stringify(e));			}			}		worker.onerror = function(e){			try{				result.console.stdErr += e.data.toString('utf8');			}catch(e){			//	console.log(JSON.stringify(e));			} 		}		worker.onterminated = function(e){			result.worker.hasStarted = e.hasStarted;			result.worker.exitStatus = e.exitStatus;			result.worker.forced = e.forced;						exitWait();		}		if(typeof stdIn === 'string' || stdIn instanceof Buffer){			worker.postMessage(stdIn);			worker.endOfInput();		}					worker.wait();		} 	return result;} exports.escape = function(path){	switch(PLATFORM){		case 'MAC': 		case 'LIN': 			path = path.replace(/([\\!"#$%&\'()=~|<>?;*`\[\] ])/g, '\\$1');			break;		case 'WIN': 			if((/[&|<>()%\^\\" ]/).test(path)){								if((/\\$/).test(path)){					path = '"' + path + '\\"';				}else{					path = '"' + path + '"';				}			}			break;			}	return path;} exports.curl = function(command, stdIn){	return execute(CURL_PATH, command, stdIn);}2. then to call itvar systemWorkers = require("system-workers") function download(host, user, password, remotePath, localPath){	var command = ' -#';	command += " ftp://";//	command += " -k --ssl-reqd ftps://";	command += host;	command += '/' + remotePath;		command += ' -u ' + user + ':' + password;	command += ' -o ' + systemWorkers.escape(localPath);	return command;}; var result = systemWorkers.curl(download(host, user, password, remotePath, localPath));		