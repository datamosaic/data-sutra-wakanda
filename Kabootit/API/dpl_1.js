/** * DPL API * @version 1 * @modified 2015 June 22 */var DPL = {	server : {		getStats: null,		backup: null	}};// uptime macosx// 13:58  up  1:06, 3 users, load averages: 1.28 1.13 1.03// uptime ubuntu// 12:58:12 up 15 days,  1:33,  2 users,  load average: 0.01, 0.02, 0.05var STR_UPTIME_LOAD = {	macosx: "load averages:",	ubuntu: "load average:"};/** * Get stats of this server * @public * @returns {Object} */DPL.server.getStats = function getServerStats(){	// run uptime command	var uptimeResult = SystemWorker.exec( "uptime" );	if( uptimeResult === null )	{		console.log( "DPL.server.getStats: couldn't execute uptime" );		return false;	}	var uptimeOutput = uptimeResult.output.toString();		// look for load string	var loadTrio = null;	if( uptimeOutput.indexOf(STR_UPTIME_LOAD.macosx) >= 0 )	{		loadTrio = uptimeOutput.split(STR_UPTIME_LOAD.macosx)[1].trim().split(' ');	}	else if( uptimeOutput.indexOf(STR_UPTIME_LOAD.ubuntu) >= 0 )	{		loadTrio = uptimeOutput.split(STR_UPTIME_LOAD.ubuntu)[1].trim().split(', ');	}	else	{		console.log("DPL.server.getStats: couldn't parse uptime results");		return false;	}		// get memory stats		// ubuntu	// cat /proc/meminfo	// MemTotal:        3800252 kB	// MemFree:          226016 kB		// mac	// sysctl hw.memsize	// hw.memsize: 17179869184		// MenuMeters shows more memory free. I guess different utilities are looking at different metrics.	// vm_stat	// Mach Virtual Memory Statistics: (page size of 4096 bytes)	// Pages free:                             2632085.	// http://apple.stackexchange.com/a/94258	// vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'	//free:                    11249.18 Mi	//active:                   2138.86 Mi	//inactive:                  413.09 Mi	var memTotal = null;	var memFree = null;	var memUsed = null;	if( application.os.isLinux )	{		var memInfoResult = SystemWorker.exec( "cat /proc/meminfo" );		if( memInfoResult !== null )		{			var memInfo = memInfoResult.output.toString().split("\n");			console.log("memInfo: " + memInfo );			// slice off " kB" from end, convert to MB			memTotal = Math.floor( parseInt( memInfo[0].split("MemTotal:")[1].slice(0,-3), 10 ) / 1024 );			memFree = Math.floor( parseInt( memInfo[1].split("MemFree:")[1].slice(0,-3), 10 ) / 1024 );			memUsed = memTotal - memFree;		}	}	else if( application.os.isMac )	{		var memInfoTotalResult = SystemWorker.exec( "sysctl hw.memsize" );		if( memInfoTotalResult !== null )		{			var memInfoTotal = memInfoTotalResult.output.toString();			memTotal = Math.floor( parseInt( memInfoTotal.split("hw.memsize:")[1], 10 ) / 1024 / 1024 );			//console.log( "memInfoTotal: " + memInfoTotal );		}		var memInfoFreeResult = SystemWorker.exec( "vm_stat" );		if( memInfoFreeResult !== null )		{			var memInfoFree = memInfoFreeResult.output.toString().split("\n")[1];			memFree = Math.floor( parseInt( memInfoFree.split("Pages free:")[1], 10 ) * 4096 / 1024 / 1024 );			//console.log( "memInfoFree: " + memInfoFree );		}		if( memTotal !== null && memFree !== null )		{			memUsed = memTotal - memFree;		}	}	else if( application.os.isWindows )	{	}	console.log( "memTotal: " + memTotal );	console.log( "memFree: " + memFree );	console.log( "memUsed: " + memUsed );							// run date command	// same on macosx and ubuntu	var dateResult = SystemWorker.exec( 'date -u "+%F %T"' );  // UTC	if( dateResult === null )	{		console.log( "DPL.server.getStats: couldn't execute date" );		return false;	}	var stamp = dateResult.output.toString().trim().split(" ");	// package results of load and date into object	var data = {		stampString: stamp,		avgOneMin: parseFloat(loadTrio[0]),		avgFiveMin: parseFloat(loadTrio[1]),		avgFifteenMin: parseFloat(loadTrio[2]),		memory_used_mb: memUsed,		memory_free_mb: memFree	};	data.plaintext = data.stampString + " " + data.avgOneMin + " " + data.avgFiveMin + " " + data.avgFifteenMin;	return data;};/** * Backup DataFolder for all projects * @public * @returns {Object} */DPL.server.backup = function startBackupWorker() {	// grab worker	var worker = new SharedWorker( "Workers/backup.js", "kbBackup" );  // file, name of worker	var workerReturnValue = null;		var port = worker.port;		port.onmessage = function(event)	{		console.log("Returned from worker");		var message = event.data;		switch(message.response)		{			case 'running':  // boolean true=running				workerReturnValue = message.payload;  // returned in command handler after wait 				break;			case 'backup':				// on successful backup, schedule another one for 4 hours from now				workerReturnValue = 'backup done';				break; 			default:				console.log("workerPollingCommand: response from worker not recognized: " + message.response);				break;		}		close();  // needed so original module function exits its wait() and returns	};		port.postMessage( { command: 'start' } );	// when called in bootstrap (as this is) it prevents next bootstraps from running	// wait();  // wait for worker callback to onmessage above. needs callback to call close() to exit this wait().		return workerReturnValue;}/** * Get stats of this server * @public * @returns {Object} */DPL.server.kill = function killServer() {	/**	 * Run commands	 *	 * @param {String} command Command to run (include all arguments here)	 * @param {Folder} folder Context to run command from	 * @return {Object} Output from command	 */	function callWorker(command, folder) {		try {			var worker = SystemWorker.exec(command, null, folder);			return {				result: worker.output.toString(),				error: worker.error.toString()			}		}		catch (e) {		}	};		// shutdown	console.log("Shutdown initiated");		var target = Date.now() + 10;  // basically wait 10 ms	while ( Date.now() < target ) {		// spin it so we can see preceding log	}		callWorker('kill -9 ' + process.pid,'/');}module.exports = DPL;