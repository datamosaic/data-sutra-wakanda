/** * SA API * @version 1 * @modified 2014 July 18 */var SA = new Object();SA.file = {};/** * Copy file from location 1 to location 2 * * @param {String} from The source file * @param {String} to Directory (inside current project's WebFolder) where to copy file * @param {Boolean} [UUID=true] Copy to unique folder * @public * @returns {File} */SA.file.copy = function copyFile(from,to,UUID) {	try {				if (typeof UUID == 'boolean' && !UUID) {			UUID = '';		}		else {			UUID = generateUUID() + '/';		}				// were slashes included in to or not?		var needSlash = '';		if (to && to[to.length - 1] != '/') {			needSlash = '/';		}				// get the file name (extension included)		var sourceName = File(from).name;		// destination file path (as string)		var destination = File(FileSystemSync("WEBFOLDER").path + to + needSlash + UUID + sourceName);				// folder must be created in order to copy file		if (!destination.parent.exists) {			destination.parent.create();		}				File(from).copyTo(destination,true);				// there is a file in this location, chances are the copy completed successfully		if (destination.exists) {			return destination;		}	}	catch (e) {			}};/** * Copy tree and contents from one location to another * * @param {Folder} from The from * @param {Folder} to The to * @private */SA.file.copyTree = function copyTree(from,to) {	try {		function createFolder(path) {			var destFolder = Folder(path);			if (!destFolder.exists) {				destFolder.create();			}			return destFolder		}				function makeSureGetAllSubDirectories(item, iterator, parent) {			var relativePath = parent.path.substr(from.parent.path.length);						// this is a folder			if (Folder.isFolder(item.path)) {				// create on destination				var destFolder = createFolder(to.path + relativePath + item.name);								// do it's children				item.forEachFolder(makeSureGetAllSubDirectories);			}		}				// recursively create directory structure		from.forEachFolder(makeSureGetAllSubDirectories);						// only works on files!  what about folders		from.parse(function(item, iterator, parent) {			var relativePath = parent.path.substr(from.parent.path.length);						// this is a folder, create on destination and continue in			if (Folder.isFolder(item.path)) {				//NOTE: this will never run because parse isn't running on empty directories				var destFolder = createFolder(to.path + relativePath + item.name);			}			// copy file			else {				// destination file path (as string)				var destFile = File(to.path + relativePath + item.name);								// make sure parent directory exists				var destFolder = createFolder(to.path + relativePath);								item.copyTo(destFile,true);			}		});	}	catch (e) {			}}/** * Move file from location 1 to location 2 * * @param {String} from The source file * @param {String} to Directory (inside current project's WebFolder) where to copy file * @param {Boolean} [UUID=true] Copy to unique folder * @public * @returns {File} */SA.file.move = function moveFile(from,to,UUID) {	try {				if (typeof UUID == 'boolean' && !UUID) {			UUID = '';		}		else {			UUID = generateUUID() + '/';		}				// were slashes included in to or not?		var needSlash = '';		if (to && to[to.length - 1] != '/') {			needSlash = '/';		}				// get the file name (extension included)		var sourceName = File(from).name;		// destination file path (as string)		var destination = File(FileSystemSync("WEBFOLDER").path + to + needSlash + UUID + sourceName);				// folder must be created in order to copy file		if (!destination.parent.exists) {			destination.parent.create();		}				File(from).moveTo(destination,true);				// there is a file in this location, chances are the move completed successfully		if (destination.exists) {			return destination;		}	}	catch (e) {			}};/** * Delete files * * @param {String} file The path to the file to delete * @public * @returns {File} */SA.file.remove = function deleteFile(file) {	try {		if (File(file).exists || Folder(file).exists) {			var success = File(file).remove();						// path to file just deleted (everything went through well)			if (success) {				return file;			}		}	}	catch (e) {			}};module.exports = SA;