var businessProjects = new Array();var solutionFile = File('/Data/Codex/Wakanda/Labels/Labels_Solution/Labels.waSolution');// shared codevar configPath = solutionFile.path.split('/');configPath.pop();var solutionName = configPath.pop();configPath = configPath.join('/') + '/';var solutionPath = configPath + solutionName + '/';// get widgets projectvar masterWidgets = Folder(configPath + 'Widgets/Widgets');// there are widgets to copyif (masterWidgets.exists && masterWidgets.folders.length) {		// prompt that will delete any widgets in directory//	if (studio.confirm("All existing widgets in business projects will be deleted.\nContinue?")) {		var proceed = true;//	}		// devine all business projects	if (solutionFile.exists) {		config = JSON.parse(XmlToJSON(solutionFile.toString(), "json-bag", "solution"));		// get all projects to be operated on		for (var i in config) {			// only work on project node (weird issue with __CDATA)			if (i.toLowerCase() == 'project') {				// loop over all projects				for (var j = 0; j < config[i].length; j++) {					// check that this project has a valid path					if (config[i][j].hasOwnProperty('path') && config[i][j].path) {						var projectFile = File(solutionPath + config[i][j].path);									// check to see if this project is a shared resource project						if (projectFile.exists) {							var projConfig = JSON.parse(XmlToJSON(projectFile.toString(), "json-bag", "project"));							// get all projects to be operated on							for (var k in projConfig) {								// only work on file node (weird issue with __CDATA)								if (k.toLowerCase() == 'file') {									// loop over all tags									for (var m in projConfig[k]) {										// check that this project has a valid path										if (projConfig[k][m].tag[0].hasOwnProperty('name') && projConfig[k][m].tag[0].name == 'settings') {											var projectSettings = File(projectFile.parent.path + projConfig[k][m].path);																						// check to see if this project is a shared resource project											if (projectSettings.exists) {												var isShared = false;																								// loop over settings to find if shared or not												var projSettings = JSON.parse(XmlToJSON(projectSettings.toString(), "json-bag", "settings"));												for (var n in projSettings) {													if (n.toLowerCase() == 'kabootit' && projSettings[n][0].hasOwnProperty('shared') && projSettings[n][0].shared == 'true') {														isShared = true;													}												}																								// this isn't a shared project, publish to here												if (!isShared) {													businessProjects.push(Folder(projectFile.parent.path + 'Widgets'));												}											}										}									}								}							}						}					}				}			}		}	}	// add to all business modules	if (proceed) {		for (var i = 0; i < businessProjects.length; i++) {						var businessProject = businessProjects[i];			if (businessProject.exists) {				businessProject.removeContent();			}						// grab unfiltered static asset api so can copy tree			var SA = require('../StaticAssets/Kabootit/API/sa_1.js');			// copy boilerplate kabootit directory across			SA.file.copyTree(masterWidgets,businessProject.parent);		}	}}//studio.alert(masterWidgets.folders.length + " widgets added to all business projects");