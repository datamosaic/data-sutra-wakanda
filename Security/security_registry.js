/* * This file provides registered actions per credentials and provides how to  * access the projects (what URL they are being served from) *//** * Actions allowed per API; called via xhr * * @param {HTTPRequest} request * @param {HTTPResponse} response * @return {JSON} */function actions(request, response) {	var module = (request && request.hasOwnProperty('body') && request.body.length) ? JSON.parse(request.body) : '';		// stubbed data for actions allowed per api	var stub = {			'api_xxx': ['action1','action2','action3'],			'AC': [				'organization.get',				'organization.getAll',				'organization.new',				'organization.delete',				'organization.duplicate'			],			'FACTORY': [				'test.testAction',				'test.getUnit',				'test.getAllUnit',				'test.getAllUnits'			]		};		var actions = init(true);		// this module exists, grab its possible api actions	if (module && stub.hasOwnProperty(module)) {		response.contentType = 'application/json';		return JSON.stringify(stub[module]);	}	// return nothing	else {		return JSON.stringify(new Array());	}}/** * Aggregate URLs and actions for all included projects * * @param {Boolean} getActions Return actions * @param {Boolean} getURLs Return URLs * @return {JSON} */function init(getActions, getURLs) {	var actions = new Object();	var URLs = {		server : new Object(),		developer : new Object()	}		// get solution's projects	var configPath = FileSystemSync("SOLUTION").path;	var solutionDir = Folder(configPath);	for (var j in solutionDir.files) {		if (solutionDir.files[j].extension === "waSolution") {			var solutionFile = File(solutionDir.files[j].path);			break		}	}		configPath = configPath.split('/');	configPath.pop();	configPath.pop();	configPath = configPath.join('/') + '/';		var projects = JSON.parse(XmlToJSON(solutionFile.toString(), "json-bag", "solution"));		// get all projects to be operated on	for (var i in projects) {		// only work on project node (weird issue with __CDATA)		if (i.toLowerCase() == 'project') {			// loop over all projects			for (var j = 0; j < projects[i].length; j++) {				// check that this project has a non-null name				if (projects[i][j].hasOwnProperty('path') && projects[i][j].path) {					var regex =  new RegExp(/\((.*)\)/);					var project = projects[i][j].path.split('/');					var apiSecure = configPath + project[1] + '/Security/' + regex.exec(project[2])[1].toLowerCase() + '.json';					var security = File(apiSecure);										if (security.exists) {						var api = JSON.parse(security.toString());												actions[api.name] = api.actions;						URLs.server[api.name] = api.path.server;						URLs.developer[api.name] = api.path.developer;					}				}			}		}	}		if (getActions) {		return actions;	}	else if (getURLs) {		return URLs;	}}// called in security_check via requirevar module = module || new Object();if (module && module.exports) {	var URLs = init(null,true);		/**	 * How to reference each project	 * 	 * @param {String}  module IDentifier for requested module	 * @return {String} Host (including port, if any)	 */	module.exports.path = function project(module) {		// some check to see if in developer		if (true) {			return URLs.developer[module];		}		else {			return URLs.server[module];		}	}}