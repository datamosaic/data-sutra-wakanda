/* * This file provides registered actions per credentials and provides how to  * access the projects (what URL they are being served from) *//** * Actions allowed per API; called via xhr * * @param {HTTPRequest} request * @param {HTTPResponse} response * @return {JSON} */function actions(request, response) {	var module = (request && request.hasOwnProperty('body') && request.body.length) ? JSON.parse(request.body) : '';	var actions = init(true);		// this module exists, grab its possible api actions	if (module && actions.hasOwnProperty(module)) {		response.contentType = 'application/json';		return JSON.stringify(actions[module]);	}	// return nothing	else {		return JSON.stringify(new Array());	}}/** * Aggregate URLs and actions for all included projects * * @param {Boolean} getActions Return actions * @param {Boolean} getURLs Return URLs * @param {Boolean} getMapping Return project folder for ID * @param {Boolean} getRoutes Return array of allowed routes for this project * @return {JSON} */function init(getActions, getURLs, getMapping, getRoutes) {	var actions = new Object();	var URLs = {		server : new Object(),		developer : new Object()	}	var mapping = new Object();	var routes = new Object();		// get solution's projects	var configPath = FileSystemSync("SOLUTION").path;	var solutionDir = Folder(configPath);	for (var j in solutionDir.files) {		if (solutionDir.files[j].extension === "waSolution") {			var solutionFile = File(solutionDir.files[j].path);			break		}	}		configPath = configPath.split('/');	configPath.pop();	configPath.pop();	configPath = configPath.join('/') + '/';		var projects = JSON.parse(XmlToJSON(solutionFile.toString(), "json-bag", "solution"));		// get all projects to be operated on	for (var i in projects) {		// only work on project node (weird issue with __CDATA)		if (i.toLowerCase() == 'project') {			// loop over all projects			for (var j = 0; j < projects[i].length; j++) {				// check that this project has a non-null name				if (projects[i][j].hasOwnProperty('path') && projects[i][j].path) {					var regex =  new RegExp(/\((.*)\)/);					var project = projects[i][j].path.split('/');					var id = regex.exec(project[2]) ? regex.exec(project[2])[1].toLowerCase() : '';					var apiSecure = configPath + project[1] + '/Security/' + id + '.json';					var security = File(apiSecure);										if (security.exists) {						var api = JSON.parse(security.toString());												// go grab actions (TODO: move this to the version level)						var v1API = File(configPath + project[1] + '/API/' + id + '_1.js')												// make sure there is a place to store actions						if (!(api.actions instanceof Array)) {							api.actions = new Array();						}												if (v1API.exists) {							v1API = v1API.toString();														var derivedActions							var derivedRegex = /@public[\s\S]*?\*\/\s+(.*?)(?:\s+)?=/gi;														while (derivedActions = derivedRegex.exec(v1API)) {								var methodName = derivedActions[1].split('.').slice(1).join('.');																if (api.actions.indexOf(methodName) == -1) {									api.actions.push(methodName);								}							}						}												// assign out						actions[api.name] = api.actions;						URLs.server[api.name] = api.path.server;						URLs.developer[api.name] = api.path.developer;						mapping[api.name.toLowerCase()] = configPath + project[1];						routes[api.name.toLowerCase()] = api.routes || new Array();					}				}			}		}	}		if (getActions) {		return actions;	}	else if (getURLs) {		return URLs;	}	else if (getMapping) {		return mapping;	}	else if (getRoutes) {		return routes;	}}// called in security_check via requirevar module = module || new Object();if (module && module.exports) {	var URLs = init(null,true);		/**	 * How to reference each project	 * 	 * @param {String}  module IDentifier for requested module	 * @return {String} Host (including port, if any)	 */	module.exports.path = function project(module) {		// some check to see if in developer		if (true) {			return URLs.developer[module];		}		else {			return URLs.server[module];		}	}		module.exports.projectPath = function projectPath(id) {		return init(null,null,true)[id.toLowerCase()];	}		module.exports.routes = function routes(id) {		var allRoutes = init(null,null,null,true);				// if no routes specified for first identifier, probably is single-project solution; return for app		return allRoutes[id.toLowerCase()] || allRoutes.app;	}}