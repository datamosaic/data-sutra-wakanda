var session = currentSession();exports.session = session;exports.valid = session.storage.validLogin;/** * Attempt to login using default login form * */exports.login = function LoginListener(userName, passwordOrKey, secondIsAKey) {	debugger;	// if ( arguments[0] == 1 ) {	// 	session.storage.testParam = 1;	// 	return "1";	// }	// else {	// 	session.storage.testParam = 0;	// 	return "0";	// }	// stubbed credentials	userName = 'bob';	passwordOrKey = 'tomato';	//TODO: switch to using hash of password instead of plaintext		// login valid	var auth = auth(userName,passwordOrKey);	if (auth.error != 401) {		// determine group belonging to and set up permissions		if (true) {			var group = 'Admin';						// api				// rebuild api with current credentials							// TODO: navigation						// TODO: SaaS filtering, etc		}				// set status as logged in			//TODO: set this to be some UUID so more hack proof		session.storage.validLogin = true;	}		return auth;};/** * Log out current user and return to login form * */ exports.logout = function logout() {	 // mirror what happens in login, but do the reverse		// set status as logged out		//TODO: set this to be some UUID so more hack proof	delete session.storage.validLogin;		showLogin();}/** * Show login form * */exports.loginForm = function showLogin() {	}/** * Authenticate credentials * @param {String} user * @param {String} pass * @param {String} [type='default'] Type of authentication to be performed; defaults to kabootit internal */exports.authenticate = function auth(user,pass,type) {	if (true) {		var valid = {			// a UUID string referencing the user. It can be any UUID but must not be an existing user ID			ID: generateUUID(),			// a string which will be the user name attribute			name: user || 'Troy',			// a string which will be the user full name attribute			fullName: "Troy Bob Larry",			// an array of UUID strings, or			// an array of group names referencing the groups the user must belong to			belongsTo: [generateUUID()],			// a Storage object which is the sessionStorage property of the user session			storage: session.storage		};	}	else {		valid = {			// the error number (passed as a number)			error: 401,			//the text of the error			errorMessage: "Unauthorized"		};	}		return valid;}